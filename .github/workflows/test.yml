name: AutoTest

on:
  workflow_dispatch:  # manually trigger
  workflow_call:
jobs:
  #Windows X86_64
  win64_test_MSVC_cpp14:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Windows
        run: |
          cd build\test\win64  
          .\RunTest_MSVC.bat 14
        

  win64_test_MSVC_Clang_cpp14:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Windows
        run: |
          cd build\test\win64  
          .\RunTest_Clang.bat 14
        
  win64_test_MinGW_GCC_cpp14:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'



      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        id: msys2
        with:
          msystem: MINGW64
          release: true
          path-type: inherit
          install: mingw-w64-x86_64-gcc mingw-w64-x86_64-binutils mingw-w64-x86_64-make
          update: true

      - name: Ensure MSYS2 packages
        shell: msys2 {0}
        run: |
          pacman -S --noconfirm --needed --overwrite '*' mingw-w64-x86_64-gcc mingw-w64-x86_64-binutils mingw-w64-x86_64-make
          echo "MSYS2 Root: $MSYSTEM_CARCH"
          which gcc
          which mingw32-make
      - name: Remove conflicting MinGW paths
        run: |
          $env:Path = $env:Path -replace 'C:\\mingw64\\bin;','' -replace 'C:\\Program Files\\Git\\mingw64\\bin;',''
          echo "PATH=$env:Path" >> $env:GITHUB_ENV
        shell: powershell
      - name: Add MSYS2 to PATH
        run: |
          $env:Path = "${{ steps.msys2.outputs.msys2-location }}\mingw64\bin;" + $env:Path
          echo "PATH=$env:Path" >> $env:GITHUB_ENV
        shell: powershell

      - name: Build for Windows
        run: |
          cd build\test\win64  
          .\RunTest_MinGW_GCC.bat 14
  

  win64_test_MinGW_Clang_cpp14:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Windows
        run: |
          cd build\test\win64  
          .\RunTest_MinGW_Clang.bat 14

  win64_test_MSVC_cpp17:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Windows
        run: |
          cd build\test\win64  
          .\RunTest_MSVC.bat 17
        

  win64_test_MSVC_Clang_cpp17:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Windows
        run: |
          cd build\test\win64  
          .\RunTest_Clang.bat 17
        
  win64_test_MinGW_GCC_cpp17:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'



      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        id: msys2
        with:
          msystem: MINGW64
          release: true
          path-type: inherit
          install: mingw-w64-x86_64-gcc mingw-w64-x86_64-binutils mingw-w64-x86_64-make
          update: true

      - name: Ensure MSYS2 packages
        shell: msys2 {0}
        run: |
          pacman -S --noconfirm --needed --overwrite '*' mingw-w64-x86_64-gcc mingw-w64-x86_64-binutils mingw-w64-x86_64-make
          echo "MSYS2 Root: $MSYSTEM_CARCH"
          which gcc
          which mingw32-make
      - name: Remove conflicting MinGW paths
        run: |
          $env:Path = $env:Path -replace 'C:\\mingw64\\bin;','' -replace 'C:\\Program Files\\Git\\mingw64\\bin;',''
          echo "PATH=$env:Path" >> $env:GITHUB_ENV
        shell: powershell
      - name: Add MSYS2 to PATH
        run: |
          $env:Path = "${{ steps.msys2.outputs.msys2-location }}\mingw64\bin;" + $env:Path
          echo "PATH=$env:Path" >> $env:GITHUB_ENV
        shell: powershell

      - name: Build for Windows
        run: |
          cd build\test\win64  
          .\RunTest_MinGW_GCC.bat 17
  

  win64_test_MinGW_Clang_cpp17:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Windows
        run: |
          cd build\test\win64  
          .\RunTest_MinGW_Clang.bat 17

  win64_test_MSVC_cpp20:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Windows
        run: |
          cd build\test\win64  
          .\RunTest_MSVC.bat 20

  win64_test_MSVC_Clang_cpp20:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Windows
        run: |
          cd build\test\win64  
          .\RunTest_Clang.bat 20
        
  win64_test_MinGW_GCC_cpp20:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        id: msys2
        with:
          msystem: MINGW64
          release: true
          path-type: inherit
          install: mingw-w64-x86_64-gcc mingw-w64-x86_64-binutils mingw-w64-x86_64-make
          update: true

      - name: Ensure MSYS2 packages
        shell: msys2 {0}
        run: |
          pacman -S --noconfirm --needed --overwrite '*' mingw-w64-x86_64-gcc mingw-w64-x86_64-binutils mingw-w64-x86_64-make
          echo "MSYS2 Root: $MSYSTEM_CARCH"
          which gcc
          which mingw32-make
      - name: Remove conflicting MinGW paths
        run: |
          $env:Path = $env:Path -replace 'C:\\mingw64\\bin;','' -replace 'C:\\Program Files\\Git\\mingw64\\bin;',''
          echo "PATH=$env:Path" >> $env:GITHUB_ENV
        shell: powershell
      - name: Add MSYS2 to PATH
        run: |
          $env:Path = "${{ steps.msys2.outputs.msys2-location }}\mingw64\bin;" + $env:Path
          echo "PATH=$env:Path" >> $env:GITHUB_ENV
        shell: powershell

      - name: Build for Windows
        run: |
          cd build\test\win64  
          .\RunTest_MinGW_GCC.bat 20

  win64_test_MinGW_Clang_cpp20:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Windows
        run: |
          cd build\test\win64  
          .\RunTest_MinGW_Clang.bat 20

  win64_test_MSVC_cpp23:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Windows
        run: |
          cd build\test\win64  
          .\RunTest_MSVC.bat 23
        

  win64_test_MSVC_Clang_cpp23:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Windows
        run: |
          cd build\test\win64  
          .\RunTest_Clang.bat 23

  win64_test_MinGW_GCC_cpp23:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        id: msys2
        with:
          msystem: MINGW64
          release: true
          path-type: inherit
          install: mingw-w64-x86_64-gcc mingw-w64-x86_64-binutils mingw-w64-x86_64-make
          update: true

      - name: Ensure MSYS2 packages
        shell: msys2 {0}
        run: |
          pacman -S --noconfirm --needed --overwrite '*' mingw-w64-x86_64-gcc mingw-w64-x86_64-binutils mingw-w64-x86_64-make
          echo "MSYS2 Root: $MSYSTEM_CARCH"
          which gcc
          which mingw32-make
      - name: Remove conflicting MinGW paths
        run: |
          $env:Path = $env:Path -replace 'C:\\mingw64\\bin;','' -replace 'C:\\Program Files\\Git\\mingw64\\bin;',''
          echo "PATH=$env:Path" >> $env:GITHUB_ENV
        shell: powershell
      - name: Add MSYS2 to PATH
        run: |
          $env:Path = "${{ steps.msys2.outputs.msys2-location }}\mingw64\bin;" + $env:Path
          echo "PATH=$env:Path" >> $env:GITHUB_ENV
        shell: powershell

      - name: Build for Windows
        run: |
          cd build\test\win64  
          .\RunTest_MinGW_GCC.bat 23
  

  win64_test_MinGW_Clang_cpp23:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Windows
        run: |
          cd build\test\win64  
          .\RunTest_MinGW_Clang.bat 23      

  #Windows ARM64
  win_arm64_test_MinGW_Clang_cpp14:
    runs-on: windows-11-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
          
      - name: Install Clang
        run: |
          choco uninstall -y llvm --all-versions
          choco install -y llvm
        shell: powershell

      - name: Build for Windows
        run: |
          cd build\test\win64  
          mkdir build_folder
          cd build_folder
          cmake ..\..\..\..\test -G "MinGW Makefiles" -DTARGET_PLATFORM:STRING=win64 -DCPP_VER=14 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          make
          objdump -f BqLogUnitTest.exe
          .\BqLogUnitTest.exe
          cmake ..\..\..\..\test -G "MinGW Makefiles" -DTARGET_PLATFORM:STRING=win64 -DCPP_VER=14 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          make -j4
          .\BqLogUnitTest.exe

  win_arm64_test_MinGW_Clang_cpp17:
    runs-on: windows-11-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Clang
        run: |
          choco uninstall -y llvm --all-versions
          choco install -y llvm
        shell: powershell

      - name: Build for Windows
        run: |
          cd build\test\win64  
          mkdir build_folder
          cd build_folder
          cmake ..\..\..\..\test -G "MinGW Makefiles" -DTARGET_PLATFORM:STRING=win64 -DCPP_VER=17 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          make
          objdump -f BqLogUnitTest.exe
          .\BqLogUnitTest.exe
          cmake ..\..\..\..\test -G "MinGW Makefiles" -DTARGET_PLATFORM:STRING=win64 -DCPP_VER=17 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          make -j4
          .\BqLogUnitTest.exe

  win_arm64_test_MinGW_Clang_cpp20:
    runs-on: windows-11-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Clang
        run: |
          choco uninstall -y llvm --all-versions
          choco install -y llvm
        shell: powershell

      - name: Build for Windows
        run: |
          cd build\test\win64  
          mkdir build_folder
          cd build_folder
          cmake ..\..\..\..\test -G "MinGW Makefiles" -DTARGET_PLATFORM:STRING=win64 -DCPP_VER=20 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          make
          objdump -f BqLogUnitTest.exe
          .\BqLogUnitTest.exe
          cmake ..\..\..\..\test -G "MinGW Makefiles" -DTARGET_PLATFORM:STRING=win64 -DCPP_VER=20 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          make -j4
          .\BqLogUnitTest.exe


  #Linux-ubuntu-X86_64
  ubuntu_test_GCC_cpp11:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Linux
        run: |
          cd build/test/linux  
          chmod +x *.sh
          ./RunTest_GCC.sh 11
  
  ubuntu_test_Clang_cpp11:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Linux
        run: |
          cd build/test/linux  
          chmod +x *.sh
          ./RunTest_Clang.sh 11

  ubuntu_test_GCC_cpp14:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Linux
        run: |
          cd build/test/linux  
          chmod +x *.sh
          ./RunTest_GCC.sh 14

  ubuntu_test_Clang_cpp14:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Linux
        run: |
          cd build/test/linux  
          chmod +x *.sh
          ./RunTest_Clang.sh 14

  ubuntu_test_GCC_cpp17:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Linux
        run: |
          cd build/test/linux  
          chmod +x *.sh
          ./RunTest_GCC.sh 17

  ubuntu_test_Clang_cpp17:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Linux
        run: |
          cd build/test/linux  
          chmod +x *.sh
          ./RunTest_Clang.sh 17

  ubuntu_test_GCC_cpp20:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Linux
        run: |
          cd build/test/linux  
          chmod +x *.sh
          ./RunTest_GCC.sh 20

  ubuntu_test_Clang_cpp20:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Linux
        run: |
          cd build/test/linux  
          chmod +x *.sh
          ./RunTest_Clang.sh 20

  ubuntu_test_GCC_cpp23:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Linux
        run: |
          cd build/test/linux  
          chmod +x *.sh
          ./RunTest_GCC.sh 23

  ubuntu_test_Clang_cpp23:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Linux
        run: |
          cd build/test/linux  
          chmod +x *.sh
          ./RunTest_Clang.sh 23
          
  #Linux-ubuntu-ARM64
  ubuntu_arm64_test_GCC_cpp11:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Install GDB
        run: |
          sudo apt-get update
          sudo apt-get install -y gdb

      - name: Build for Linux
        run: |
          cd build/test/linux  
          chmod +x *.sh
          ./RunTest_GCC.sh 11

  ubuntu_arm64_test_Clang_cpp11:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Install GDB
        run: |
          sudo apt-get update
          sudo apt-get install -y gdb

      - name: Build for Linux
        run: |
          cd build/test/linux  
          chmod +x *.sh
          ./RunTest_Clang.sh 11

  ubuntu_arm64_test_GCC_cpp14:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Install GDB
        run: |
          sudo apt-get update
          sudo apt-get install -y gdb

      - name: Build for Linux
        run: |
          cd build/test/linux  
          chmod +x *.sh
          ./RunTest_GCC.sh 14

  ubuntu_arm64_test_Clang_cpp14:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Install GDB
        run: |
          sudo apt-get update
          sudo apt-get install -y gdb

      - name: Build for Linux
        run: |
          cd build/test/linux  
          chmod +x *.sh
          ./RunTest_Clang.sh 14

  ubuntu_arm64_test_GCC_cpp17:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Install GDB
        run: |
          sudo apt-get update
          sudo apt-get install -y gdb

      - name: Build for Linux
        run: |
          cd build/test/linux  
          chmod +x *.sh
          ./RunTest_GCC.sh 17

  ubuntu_arm64_test_Clang_cpp17:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Install GDB
        run: |
          sudo apt-get update
          sudo apt-get install -y gdb

      - name: Build for Linux
        run: |
          cd build/test/linux  
          chmod +x *.sh
          ./RunTest_Clang.sh 17

  ubuntu_arm64_test_GCC_cpp20:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Install GDB
        run: |
          sudo apt-get update
          sudo apt-get install -y gdb

      - name: Build for Linux
        run: |
          cd build/test/linux  
          chmod +x *.sh
          ./RunTest_GCC.sh 20

  ubuntu_arm64_test_Clang_cpp20:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Install GDB
        run: |
          sudo apt-get update
          sudo apt-get install -y gdb

      - name: Build for Linux
        run: |
          cd build/test/linux  
          chmod +x *.sh
          ./RunTest_Clang.sh 20

  ubuntu_arm64_test_GCC_cpp23:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Install GDB
        run: |
          sudo apt-get update
          sudo apt-get install -y gdb

      - name: Build for Linux
        run: |
          cd build/test/linux  
          chmod +x *.sh
          ./RunTest_GCC.sh 23

  ubuntu_arm64_test_Clang_cpp23:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Install GDB
        run: |
          sudo apt-get update
          sudo apt-get install -y gdb

      - name: Build for Linux
        run: |
          cd build/test/linux  
          chmod +x *.sh
          ./RunTest_Clang.sh 23

  #linux-debian
  debian_test_GCC_cpp17:
    runs-on: ubuntu-latest
    container: 
      image: ghcr.io/pippocao/bqlog/debian:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install necessary tools (gcc and clang)
        run: |
          apt-get update
          apt-get install -y gcc clang g++ make cmake

          apt-get install -y software-properties-common
          apt-get update
          apt-get install -y openjdk-17-jdk

      - name: Set up Java
        run: |
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV

      - name: Build for Debian
        run: |
            cd build/test/linux  
            chmod +x *.sh
            ./RunTest_GCC.sh 
  
  debian_test_Clang_cpp17:
    runs-on: ubuntu-latest
    container: 
      image: ghcr.io/pippocao/bqlog/debian:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install necessary tools (gcc and clang)
        run: |
          apt-get update
          apt-get install -y gcc clang g++ make cmake

          apt-get install -y software-properties-common
          apt-get update
          apt-get install -y openjdk-17-jdk

      - name: Set up Java
        run: |
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV

      - name: Build for Debian
        run: |
            cd build/test/linux  
            chmod +x *.sh
            ./RunTest_Clang.sh 

  debian32_test_GCC_cpp17:
    runs-on: ubuntu-latest
    container: 
      image: ghcr.io/pippocao/bqlog/i386_debian:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        run: |
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-i386
          echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-i386" >> $GITHUB_ENV

      - name: Build for Debian 32
        run: |
            cd build/test/linux  
            chmod +x *.sh
            ./RunTest_GCC.sh 

  debian32_test_Clang_cpp17:
    runs-on: ubuntu-latest
    container: 
      image: ghcr.io/pippocao/bqlog/i386_debian:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        run: |
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-i386
          echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-i386" >> $GITHUB_ENV

      - name: Build for Debian 32
        run: |
            cd build/test/linux  
            chmod +x *.sh
            ./RunTest_Clang.sh 

  #Mac
  mac_apple_silicon_test_cpp11:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Set up XCode
        run: sudo xcode-select --switch /Applications/Xcode.app

      - name: Build for macOS
        run: |
          cd build/test/mac  
          chmod +x *.sh
          ./RunTest.sh 11

  mac_apple_silicon_test_cpp14:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Set up XCode
        run: sudo xcode-select --switch /Applications/Xcode.app

      - name: Build for macOS
        run: |
          cd build/test/mac  
          chmod +x *.sh
          ./RunTest.sh 14

  mac_apple_silicon_test_cpp17:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Set up XCode
        run: sudo xcode-select --switch /Applications/Xcode.app

      - name: Build for macOS
        run: |
          cd build/test/mac  
          chmod +x *.sh
          ./RunTest.sh 17

  mac_apple_silicon_test_cpp20:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Set up XCode
        run: sudo xcode-select --switch /Applications/Xcode.app

      - name: Build for macOS
        run: |
          cd build/test/mac  
          chmod +x *.sh
          ./RunTest.sh 20

  mac_apple_silicon_test_cpp23:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Set up XCode
        run: sudo xcode-select --switch /Applications/Xcode.app

      - name: Build for macOS
        run: |
          cd build/test/mac  
          chmod +x *.sh
          ./RunTest.sh 23

  #Unix-FreeBSD
  #Unix-FreeBSD AMD64 GCC
  freeBSD_test_GCC_cpp17:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/pippocao/bqlog/freebsd_amd64:latest
      options: --privileged  # Required for running QEMU inside container
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start FreeBSD VM and run tests
        run: |
          # Create SSH directory with proper permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Create test script for FreeBSD
          cat > /tmp/freebsd_test.sh << 'EOF'
          #!/bin/sh
          set -e
          
          # Install required packages
          pkg update -f
          pkg install -y gcc cmake bash openjdk11
          
          # Setup Java environment
          export JAVA_HOME="/usr/local/openjdk11"
          export PATH="$JAVA_HOME/bin:$PATH"
          
          # Run tests
          cd /root/workspace/build/test/unix_like
          chmod +x *.sh
          ./RunTest_GCC.sh
          
          # Return exit code
          exit $?
          EOF
          
          # List available FreeBSD images
          echo "Available FreeBSD images:"
          ls -la /freebsd/
          
          # Start FreeBSD VM with QEMU - use display none instead of nographic
          qemu-system-x86_64 -m 16G -smp 2 -display none -serial null \
            -device virtio-net,netdev=net0 \
            -netdev user,id=net0,hostfwd=tcp::2222-:22 \
            -drive file=/freebsd/FreeBSD-14.2-RELEASE-amd64.qcow2,if=virtio \
            -daemonize
          
          # Generate SSH key
          ssh-keygen -t rsa -f ~/.ssh/id_rsa -N ""
          
          # Wait for VM to boot with robust retry logic
          echo "Waiting for FreeBSD VM to boot..."
          MAX_ATTEMPTS=30
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "Attempt $i/$MAX_ATTEMPTS"
            if nc -z -w 5 localhost 2222; then
              echo "VM is up!"
              break
            fi
          
            if [ $i -eq $MAX_ATTEMPTS ]; then
              echo "Failed to connect to VM after $MAX_ATTEMPTS attempts"
              exit 1
            fi
          
            sleep 10
          done
          
          ssh-keyscan -p 2222 localhost >> ~/.ssh/known_hosts
          
          # Copy test script to VM
          scp -P 2222 -o StrictHostKeyChecking=no /tmp/freebsd_test.sh root@localhost:/root/
          ssh -p 2222 -o StrictHostKeyChecking=no root@localhost "chmod +x /root/freebsd_test.sh"
          
          # Copy workspace to VM
          scp -P 2222 -r $GITHUB_WORKSPACE root@localhost:/root/workspace
          
          # Run test and capture exit code
          ssh -p 2222 -o StrictHostKeyChecking=no root@localhost "/root/freebsd_test.sh"
          EXIT_CODE=$?
          
          echo "Test completed with exit code: $EXIT_CODE"
          exit $EXIT_CODE

  #Unix-FreeBSD AMD64 Clang
  freeBSD_test_Clang_cpp17:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/pippocao/bqlog/freebsd_amd64:latest
      options: --privileged  # Required for running QEMU inside container
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start FreeBSD VM and run tests
        run: |
          # Create SSH directory with proper permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Create test script for FreeBSD
          cat > /tmp/freebsd_test.sh << 'EOF'
          #!/bin/sh
          set -e
          
          # Install required packages
          pkg update -f
          pkg install -y gcc cmake bash openjdk11
          
          # Setup Java environment
          export JAVA_HOME="/usr/local/openjdk11"
          export PATH="$JAVA_HOME/bin:$PATH"
          
          # Run tests
          cd /root/workspace/build/test/unix_like
          chmod +x *.sh
          ./RunTest_Clang.sh
          
          # Return exit code
          exit $?
          EOF
          
          # List available FreeBSD images
          echo "Available FreeBSD images:"
          ls -la /freebsd/
          
          # Start FreeBSD VM with QEMU - use display none instead of nographic
          qemu-system-x86_64 -m 16G -smp 2 -display none -serial null \
            -device virtio-net,netdev=net0 \
            -netdev user,id=net0,hostfwd=tcp::2222-:22 \
            -drive file=/freebsd/FreeBSD-14.2-RELEASE-amd64.qcow2,if=virtio \
            -daemonize
          
          # Generate SSH key
          ssh-keygen -t rsa -f ~/.ssh/id_rsa -N ""
          
          # Wait for VM to boot with robust retry logic
          echo "Waiting for FreeBSD VM to boot..."
          MAX_ATTEMPTS=30
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "Attempt $i/$MAX_ATTEMPTS"
            if nc -z -w 5 localhost 2222; then
              echo "VM is up!"
              break
            fi
          
            if [ $i -eq $MAX_ATTEMPTS ]; then
              echo "Failed to connect to VM after $MAX_ATTEMPTS attempts"
              exit 1
            fi
          
            sleep 10
          done
          
          ssh-keyscan -p 2222 localhost >> ~/.ssh/known_hosts
          
          # Copy test script to VM
          scp -P 2222 -o StrictHostKeyChecking=no /tmp/freebsd_test.sh root@localhost:/root/
          ssh -p 2222 -o StrictHostKeyChecking=no root@localhost "chmod +x /root/freebsd_test.sh"
          
          # Copy workspace to VM
          scp -P 2222 -r $GITHUB_WORKSPACE root@localhost:/root/workspace
          
          # Run test and capture exit code
          ssh -p 2222 -o StrictHostKeyChecking=no root@localhost "/root/freebsd_test.sh"
          EXIT_CODE=$?
          
          echo "Test completed with exit code: $EXIT_CODE"
          exit $EXIT_CODE

  #Unix-FreeBSD ARM64 GCC
  freeBSD_arm64_test_GCC_cpp17:
    runs-on: ubuntu-24.04-arm
    container:
      image: ghcr.io/pippocao/bqlog/freebsd_arm64:latest
      options: --privileged
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create test script
        run: |
          mkdir -p /tmp/shared
          # 创建测试脚本
          cat > /tmp/shared/run_tests.sh << 'EOF'
          #!/bin/sh
          # 安装所需软件包
          pkg update -f
          pkg install -y gcc cmake bash openjdk11

          # 设置Java环境
          export JAVA_HOME="/usr/local/openjdk11" 
          export PATH="$JAVA_HOME/bin:$PATH"

          # 运行测试
          cd /github/workspace/build/test/unix_like
          chmod +x *.sh
          ./RunTest_GCC.sh

          # 保存退出代码
          echo $? > /tmp/exit_code
          shutdown -p now
          EOF
          chmod +x /tmp/shared/run_tests.sh

          # 复制GitHub工作区到共享目录
          cp -r $GITHUB_WORKSPACE /tmp/shared/workspace

      - name: Run FreeBSD ARM64 tests
        run: |
          # 调整expect脚本，增加更多超时和灵活匹配
          cat > /tmp/freebsd_test.exp << 'EOF'
          #!/usr/bin/expect

          # 增大超时时间和更宽松的匹配
          set timeout 300

          # 启动QEMU
          spawn qemu-system-aarch64 -m 8G -smp 2 -M virt -cpu cortex-a57 -nographic \
            -drive file=/freebsd/FreeBSD-14.2-RELEASE-arm64-aarch64.qcow2,if=none,id=drive0 \
            -device virtio-blk-pci,drive=drive0 \
            -virtfs local,path=/tmp/shared,mount_tag=host0,security_model=none,id=host0

          # 更灵活的登录匹配
          expect {
            "login:" { send "root\r" }
            timeout { puts "Timeout waiting for login prompt"; exit 1 }
          }

          # 可能的密码提示
          expect {
            "Password:" { send "root\r" }
            "password:" { send "root\r" }
            "# " { puts "Already at shell prompt" }
            timeout { puts "Timeout waiting for password/shell prompt"; exit 1 }
          }

          # 更灵活的shell提示符匹配
          expect {
            "# " { puts "Login successful" }
            "root@*# " { puts "Login successful" }
            "root@*:~# " { puts "Login successful" }
            timeout { puts "Timeout waiting for shell prompt"; exit 1 }
          }

          # 执行测试
          send "mkdir -p /github\r"
          expect "# "
          send "mount_9p host0 /github || mount -t 9p host0 /github\r"
          expect "# "
          send "sh /github/shared/run_tests.sh\r"

          # 等待关机或超时
          expect {
            eof { puts "FreeBSD shutdown complete" }
            timeout { puts "Timeout waiting for shutdown"; exit 1 }
          }
          EOF

          chmod +x /tmp/freebsd_test.exp
          /tmp/freebsd_test.exp | tee /tmp/test_output.log

          # 从输出中提取结果
          if grep -q "Login successful" /tmp/test_output.log; then
            echo "FreeBSD login was successful"
            # 检查是否完成测试
            if grep -q "shutdown complete" /tmp/test_output.log; then
              echo "Tests completed and VM shutdown"
              # 试图提取退出代码
              if [ -f "/tmp/shared/exit_code" ]; then
                EXIT_CODE=$(cat /tmp/shared/exit_code)
                echo "Test exit code: $EXIT_CODE"
                exit $EXIT_CODE
              else
                echo "Could not find exit code file"
                exit 1
              fi
            else
              echo "VM did not shutdown properly"
              exit 1
            fi
          else
            echo "FreeBSD login failed"
            exit 1
          fi

  test:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/pippocao/bqlog/freebsd_amd64:latest
      options: --privileged
      entrypoint: /bin/bash
    steps:
      - name: Start FreeBSD VM
        run: /usr/local/bin/start-freebsd.sh
      - name: Fix workspace permissions
        run: |
          sudo mkdir -p /__w/_temp
          sudo chown -R $(whoami):$(whoami) /__w
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Wait for FreeBSD VM
        run: |
          timeout 300 bash -c "until nc -z localhost 2222; do sleep 5; echo 'Checking SSH...'; done"
          timeout 60 bash -c "until ssh -p 2222 -i /tmp/id_rsa root@localhost whoami; do sleep 5; echo 'Checking SSH...'; done"
      - name: Copy code to FreeBSD
        run: |
          echo WorkSpace
          echo $GITHUB_WORKSPACE
          scp -P 2222 -i /tmp/id_rsa -r $GITHUB_WORKSPACE root@localhost:/root/workspace
      - name: Run tests in FreeBSD
        run: |
          ssh -p 2222 -i /tmp/id_rsa root@localhost << 'EOF'
            pkg update -f
            pkg install -y bash gcc g++ cmake openjdk17 gdb sudo
            export JAVA_HOME=/usr/local/openjdk17
            export PATH=$JAVA_HOME/bin:$PATH
            cd /root/workspace/build/test/unix_like
            chmod +x RunTest_GCC.sh
            ./RunTest_GCC.sh
            exit $?
          EOF
      - name: Debug logs
        if: failure()
        run: |
          cat expect.log
          cat qemu.log

  #Unix-FreeBSD ARM64 Clang
  freeBSD_arm64_test_Clang_cpp17:
    runs-on: ubuntu-24.04-arm
    container:
      image: ghcr.io/pippocao/bqlog/freebsd_arm64:latest
      options: --privileged
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start FreeBSD VM and run tests
        run: |
          # Create SSH directory with proper permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Create test script for FreeBSD
          cat > /tmp/freebsd_test.sh << 'EOF'
          #!/bin/sh
          set -e
          
          # Install required packages
          pkg update -f
          pkg install -y gcc cmake bash openjdk11
          
          # Setup Java environment
          export JAVA_HOME="/usr/local/openjdk11"
          export PATH="$JAVA_HOME/bin:$PATH"
          
          # Run tests
          cd /root/workspace/build/test/unix_like
          chmod +x *.sh
          ./RunTest_Clang.sh
          
          # Return exit code
          exit $?
          EOF
          
          # List available FreeBSD images
          echo "Available FreeBSD images:"
          ls -la /freebsd/
          
          # Start FreeBSD ARM64 VM with QEMU - use display none instead of nographic
          qemu-system-aarch64 -m 16G -smp 2 -M virt -cpu cortex-a57 -display none -serial null \
            -device virtio-net-pci,netdev=net0 \
            -netdev user,id=net0,hostfwd=tcp::2222-:22 \
            -drive file=/freebsd/FreeBSD-14.2-RELEASE-arm64-aarch64.qcow2,if=none,id=drive0 \
            -device virtio-blk-pci,drive=drive0 \
            -daemonize
          
          # Generate SSH key
          ssh-keygen -t rsa -f ~/.ssh/id_rsa -N ""
          
          # Wait for VM to boot with robust retry logic
          echo "Waiting for FreeBSD ARM64 VM to boot..."
          MAX_ATTEMPTS=40  # More attempts for ARM
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "Attempt $i/$MAX_ATTEMPTS"
            if nc -z -w 5 localhost 2222; then
              echo "VM is up!"
              break
            fi
          
            if [ $i -eq $MAX_ATTEMPTS ]; then
              echo "Failed to connect to VM after $MAX_ATTEMPTS attempts"
              exit 1
            fi
          
            sleep 10
          done
          
          ssh-keyscan -p 2222 localhost >> ~/.ssh/known_hosts
          
          # Copy test script to VM
          scp -P 2222 -o StrictHostKeyChecking=no /tmp/freebsd_test.sh root@localhost:/root/
          ssh -p 2222 -o StrictHostKeyChecking=no root@localhost "chmod +x /root/freebsd_test.sh"
          
          # Copy workspace to VM
          scp -P 2222 -r $GITHUB_WORKSPACE root@localhost:/root/workspace
          
          # Run test and capture exit code
          ssh -p 2222 -o StrictHostKeyChecking=no root@localhost "/root/freebsd_test.sh"
          EXIT_CODE=$?
          
          echo "Test completed with exit code: $EXIT_CODE"
          exit $EXIT_CODE