name: Build
on:  
  workflow_dispatch:  # manually trigger
  workflow_call:

permissions:
  contents: write

jobs:
  #Windows
  build_windows_x86_64_lib_MSVC:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Windows
        run: |
          cd build\lib\win64  
          .\build_all_and_pack.bat native msvc YES NO

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows_x86_64_libs
          path: ${{ github.workspace }}/dist

  build_windows_x86_64_lib_Clang:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Windows
        run: |
          cd build\lib\win64  
          .\build_all_and_pack.bat native clang YES NO

  build_windows_x86_64_lib_MinGW:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java (JDK 11)
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Install MSYS2 (CLANG64)
        id: msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: CLANG64
          update: true
          release: true
          path-type: inherit
          install: >-
            mingw-w64-clang-x86_64-toolchain
            mingw-w64-clang-x86_64-ninja

      - name: Remove conflicting MinGW paths
        shell: powershell
        run: |
          $env:Path = $env:Path -replace 'C:\\mingw64\\bin;','' -replace 'C:\\Program Files\\Git\\mingw64\\bin;',''
          echo "PATH=$env:Path" >> $env:GITHUB_ENV

      - name: Add MSYS2 CLANG64 to PATH
        shell: powershell
        run: |
          $bin = "${{ steps.msys2.outputs.msys2-location }}\clang64\bin"
          echo $bin
          echo $bin >> $env:GITHUB_PATH

      - name: Toolchain check
        shell: powershell
        run: |
          clang --version
          ninja --version
          where clang
          where ninja
          cmake --version

      - name: Build (x64)
        shell: cmd
        run: |
          cd build\lib\win64
          call build_all_and_pack.bat native mingw YES NO

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows_mingw_x86_64_libs
          path: ${{ github.workspace }}/dist

  build_windows_x86_64_tools:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build Tools
        run: |
          cd build\tools\win64 
          .\build_all_and_pack.bat

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows_x86_64_tools
          path: ${{ github.workspace }}/dist

  build_windows_arm64_lib_MSVC:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Windows
        run: |
          cd build\lib\win64  
          .\build_all_and_pack.bat arm64 msvc YES NO

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows_arm64_libs
          path: ${{ github.workspace }}/dist

  build_windows_arm64_lib_Clang:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Windows
        run: |
          cd build\lib\win64  
          .\build_all_and_pack.bat arm64 clang YES NO

  build_windows_arm64_lib_MinGW:
    runs-on: windows-11-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java (JDK 21)
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Install MSYS2 (CLANGARM64)
        id: msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: CLANGARM64
          update: true
          release: true
          path-type: inherit
          install: >-
            mingw-w64-clang-aarch64-toolchain
            mingw-w64-clang-aarch64-ninja

      - name: Remove conflicting MinGW paths
        shell: powershell
        run: |
          $env:Path = $env:Path -replace 'C:\\mingw64\\bin;','' -replace 'C:\\Program Files\\Git\\mingw64\\bin;',''
          echo "PATH=$env:Path" >> $env:GITHUB_ENV

      - name: Add MSYS2 CLANG ARM64 to PATH
        shell: powershell
        run: |
          $bin = "${{ steps.msys2.outputs.msys2-location }}\clangarm64\bin"
          echo $bin
          echo $bin >> $env:GITHUB_PATH

      - name: Toolchain check
        shell: powershell
        run: |
          clang --version
          ninja --version
          where clang
          where ninja
          cmake --version

      - name: Build (ARM64)
        shell: cmd
        run: |
          cd build\lib\win64
          call build_all_and_pack.bat native mingw YES NO

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows_mingw_arm64_libs
          path: ${{ github.workspace }}/dist

  build_windows_arm64_tools:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build Tools
        run: |
          cd build\tools\win64 
          .\build_all_and_pack.bat arm64

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows_arm64_tools
          path: ${{ github.workspace }}/dist

  #Android
  build_windows_android:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set up Android SDK (with NDK)
        id: setup-android
        uses: android-actions/setup-android@v3

      - name: Set up NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r28c
          local-cache: false

      - name: Build for Windows Android
        run: |
          cd build\lib\android
          .\win_build_all_and_pack.bat
        env:
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android_libs
          path: ${{ github.workspace }}/dist

  build_mac_android:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set up Android SDK (with NDK)
        id: setup-android
        uses: android-actions/setup-android@v3

      - name: Set up NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r28c
          local-cache: false

      - name: Build for Mac Android
        run: |
          cd build/lib/android
          chmod +x *.sh
          ./mac_build_all_and_pack.sh
        env:
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}

  build_linux_android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set up Android SDK (with NDK)
        id: setup-android
        uses: android-actions/setup-android@v3

      - name: Set up NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r28c
          local-cache: false

      - name: Build for Linux Android
        run: |
          cd build/lib/android
          chmod +x ./*.sh
          ./linux_build_all_and_pack.sh
        env:
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}


  #Linux-ubuntu-x86_64
  build_ubuntu_x86_64_lib_Clang:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Linux
        run: |
          cd build/lib/linux  
          chmod +x *.sh
          ./build_all_and_pack.sh native clang YES NO

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux_x86_64_libs
          path: ${{ github.workspace }}/dist

  build_ubuntu_x86_64_lib_GCC:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Linux
        run: |
          cd build/lib/linux  
          chmod +x *.sh
          ./build_all_and_pack.sh native gcc YES NO

  build_ubuntu_x86_64_tools_Clang:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Linux
        run: |
          cd build/tools/linux  
          chmod +x category_log_generator/*.sh
          chmod +x log_decoder/*.sh
          chmod +x *.sh
          ./build_all_and_pack_clang.sh

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux_x86_64_tools
          path: ${{ github.workspace }}/dist

  build_ubuntu_x86_64_tools_GCC:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Linux
        run: |
          cd build/tools/linux  
          chmod +x category_log_generator/*.sh
          chmod +x log_decoder/*.sh
          chmod +x *.sh
          ./build_all_and_pack_gcc.sh


  #Linux-ubuntu-arm64
  build_ubuntu_arm64_lib_Clang:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Linux
        run: |
          cd build/lib/linux  
          chmod +x *.sh
          ./build_all_and_pack.sh native clang YES NO

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux_arm64_libs
          path: ${{ github.workspace }}/dist

  build_ubuntu_arm64_lib_GCC:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Linux
        run: |
          cd build/lib/linux  
          chmod +x *.sh
          ./build_all_and_pack.sh native gcc YES NO

  build_ubuntu_arm64_tools_Clang:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Linux
        run: |
          cd build/tools/linux  
          chmod +x category_log_generator/*.sh
          chmod +x log_decoder/*.sh
          chmod +x *.sh
          ./build_all_and_pack_clang.sh

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux_arm64_tools
          path: ${{ github.workspace }}/dist

  build_ubuntu_arm64_tools_GCC:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Linux
        run: |
          cd build/tools/linux  
          chmod +x category_log_generator/*.sh
          chmod +x log_decoder/*.sh
          chmod +x *.sh
          ./build_all_and_pack_gcc.sh

  #Linux-debian-x86
  build_debian_x86_lib_Clang:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/pippocao/bqlog/i386_debian:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable UTF-8 locale
        run: |
          apt-get update
          apt-get install -y locales
          sed -i 's/# *en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
          sed -i 's/# *zh_CN.UTF-8 UTF-8/zh_CN.UTF-8 UTF-8/' /etc/locale.gen
          locale-gen
          update-locale LANG=en_US.UTF-8
          echo "LANG=en_US.UTF-8" >> $GITHUB_ENV
          echo "LC_ALL=en_US.UTF-8" >> $GITHUB_ENV
          echo "LANGUAGE=en_US:en" >> $GITHUB_ENV
          locale

      - name: Install necessary tools (gcc and clang)
        run: |
          apt-get update
          apt-get install -y gcc clang g++ make cmake gdb

          apt-get install -y software-properties-common
          apt-get update
          apt-get install -y openjdk-17-jdk
          apt-get install -y openssh-client

      - name: Set up Java
        run: |
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-i386
          echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-i386" >> $GITHUB_ENV

      - name: Build for Debian 32
        run: |
          cd build/lib/linux  
          chmod +x *.sh
          ./build_all_and_pack.sh native clang YES NO

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux_x86_libs
          path: ${{ github.workspace }}/dist

  build_debian_x86_lib_GCC:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/pippocao/bqlog/i386_debian:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable UTF-8 locale
        run: |
          apt-get update
          apt-get install -y locales
          sed -i 's/# *en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
          sed -i 's/# *zh_CN.UTF-8 UTF-8/zh_CN.UTF-8 UTF-8/' /etc/locale.gen
          locale-gen
          update-locale LANG=en_US.UTF-8
          echo "LANG=en_US.UTF-8" >> $GITHUB_ENV
          echo "LC_ALL=en_US.UTF-8" >> $GITHUB_ENV
          echo "LANGUAGE=en_US:en" >> $GITHUB_ENV
          locale

      - name: Install necessary tools (gcc and clang)
        run: |
          apt-get update
          apt-get install -y gcc clang g++ make cmake gdb

          apt-get install -y software-properties-common
          apt-get update
          apt-get install -y openjdk-17-jdk
          apt-get install -y openssh-client

      - name: Set up Java
        run: |
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-i386
          echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-i386" >> $GITHUB_ENV

      - name: Build for Debian 32
        run: |
          cd build/lib/linux  
          chmod +x *.sh
          ./build_all_and_pack.sh native gcc YES NO

  build_debian_x86_tools_Clang:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/pippocao/bqlog/i386_debian:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable UTF-8 locale
        run: |
          apt-get update
          apt-get install -y locales
          sed -i 's/# *en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
          sed -i 's/# *zh_CN.UTF-8 UTF-8/zh_CN.UTF-8 UTF-8/' /etc/locale.gen
          locale-gen
          update-locale LANG=en_US.UTF-8
          echo "LANG=en_US.UTF-8" >> $GITHUB_ENV
          echo "LC_ALL=en_US.UTF-8" >> $GITHUB_ENV
          echo "LANGUAGE=en_US:en" >> $GITHUB_ENV
          locale

      - name: Install necessary tools (gcc and clang)
        run: |
          apt-get update
          apt-get install -y gcc clang g++ make cmake gdb

          apt-get install -y software-properties-common
          apt-get update
          apt-get install -y openjdk-17-jdk
          apt-get install -y openssh-client

      - name: Set up Java
        run: |
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-i386
          echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-i386" >> $GITHUB_ENV

      - name: Build for Debian 32
        run: |
          cd build/tools/linux
          chmod +x category_log_generator/*.sh
          chmod +x log_decoder/*.sh 
          chmod +x *.sh
          ./build_all_and_pack_clang.sh 

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux_x86_tools
          path: ${{ github.workspace }}/dist

  build_debian_x86_tools_GCC:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/pippocao/bqlog/i386_debian:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable UTF-8 locale
        run: |
          apt-get update
          apt-get install -y locales
          sed -i 's/# *en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
          sed -i 's/# *zh_CN.UTF-8 UTF-8/zh_CN.UTF-8 UTF-8/' /etc/locale.gen
          locale-gen
          update-locale LANG=en_US.UTF-8
          echo "LANG=en_US.UTF-8" >> $GITHUB_ENV
          echo "LC_ALL=en_US.UTF-8" >> $GITHUB_ENV
          echo "LANGUAGE=en_US:en" >> $GITHUB_ENV
          locale

      - name: Install necessary tools (gcc and clang)
        run: |
          apt-get update
          apt-get install -y gcc clang g++ make cmake gdb

          apt-get install -y software-properties-common
          apt-get update
          apt-get install -y openjdk-17-jdk
          apt-get install -y openssh-client

      - name: Set up Java
        run: |
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-i386
          echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-i386" >> $GITHUB_ENV

      - name: Build for Debian 32
        run: |
          cd build/tools/linux
          chmod +x category_log_generator/*.sh
          chmod +x log_decoder/*.sh
          chmod +x *.sh
          ./build_all_and_pack_gcc.sh 


  #Mac
  build_mac_lib:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build for Mac
        run: |
          cd build/lib/mac  
          chmod +x *.sh
          ./build_all_and_pack.sh YES NO

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos_universal_binary_libs
          path: ${{ github.workspace }}/dist

  build_mac_tools:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build for Mac
        run: |
          cd build/tools/mac  
          chmod +x category_log_generator/*.sh
          chmod +x log_decoder/*.sh
          chmod +x *.sh
          ./build_all_and_pack.sh

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos_universal_binary_tools
          path: ${{ github.workspace }}/dist


  #freebsd_x86_64
  build_freebsd_x86_64_libs_Clang:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run in FreeBSD
        id: RunInFreeBSD
        uses: vmactions/freebsd-vm@v1
        with:
          usesh: true
          mem: 8192
          prepare: |
            pkg install -y llvm cmake bash openjdk11 gdb gcc

          run: |
            set -e -x
            pkg info -l openjdk11 | grep 'bin/java'
            export JAVA_HOME="/usr/local/openjdk11"
            export PATH="$JAVA_HOME/bin:$PATH"
            echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
            echo "PATH=$PATH" >> $GITHUB_ENV
            cd build/lib/unix_like  
            chmod +x *.sh
            ls -l
            ./build_all_and_pack.sh native clang YES NO

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: freebsd_x86_64_libs
          path: ${{ github.workspace }}/dist

  build_freebsd_x86_64_libs_GCC:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run in FreeBSD
        id: RunInFreeBSD
        uses: vmactions/freebsd-vm@v1
        with:
          usesh: true
          mem: 8192
          prepare: |
            pkg install -y llvm cmake bash openjdk11 gdb gcc

          run: |
            set -e -x
            pkg info -l openjdk11 | grep 'bin/java'
            export JAVA_HOME="/usr/local/openjdk11"
            export PATH="$JAVA_HOME/bin:$PATH"
            echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
            echo "PATH=$PATH" >> $GITHUB_ENV
            cd build/lib/unix_like  
            chmod +x *.sh
            ls -l
            ./build_all_and_pack.sh native gcc YES NO

  build_freebsd_x86_64_tools_Clang:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run in FreeBSD
        id: RunInFreeBSD
        uses: vmactions/freebsd-vm@v1
        with:
          usesh: true
          mem: 8192
          prepare: |
            pkg install -y llvm cmake bash openjdk11 gdb gcc

          run: |
            set -e -x
            pkg info -l openjdk11 | grep 'bin/java'
            export JAVA_HOME="/usr/local/openjdk11"
            export PATH="$JAVA_HOME/bin:$PATH"
            echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
            echo "PATH=$PATH" >> $GITHUB_ENV
            cd build/tools/unix_like  
            chmod +x category_log_generator/*.sh
            chmod +x log_decoder/*.sh
            chmod +x *.sh
            ls -l
            ./build_all_and_pack_clang.sh freebsd

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: freebsd_x86_64_tools
          path: ${{ github.workspace }}/dist

  build_freebsd_x86_64_tools_GCC:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run in FreeBSD
        id: RunInFreeBSD
        uses: vmactions/freebsd-vm@v1
        with:
          usesh: true
          mem: 8192
          prepare: |
            pkg install -y llvm cmake bash openjdk11 gdb gcc

          run: |
            set -e -x
            pkg info -l openjdk11 | grep 'bin/java'
            export JAVA_HOME="/usr/local/openjdk11"
            export PATH="$JAVA_HOME/bin:$PATH"
            echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
            echo "PATH=$PATH" >> $GITHUB_ENV
            cd build/tools/unix_like  
            chmod +x category_log_generator/*.sh
            chmod +x log_decoder/*.sh
            chmod +x *.sh
            ls -l
            ./build_all_and_pack_gcc.sh freebsd

  #iOS
  build_ios_lib:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build for Mac
        run: |
          cd build/lib/ios  
          chmod +x *.sh
          ./build_all_and_pack.sh

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios_libs
          path: ${{ github.workspace }}/dist

  #Java wrapper
  build_windows_java11_wrapper:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build for Java
        run: |
          cd build\wrapper\java  
          .\build_all_and_pack.bat

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: java_wrapper
          path: ${{ github.workspace }}/dist

  #C# wrapper
  build_windows_csharp_wrapper:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install and Pack
        run: |
          robocopy ".\wrapper\csharp" ".\install\wrapper\csharp" /E /R:0 /W:0
          robocopy ".\docs" ".\install\docs" /E /R:0 /W:0
          robocopy ".\" ".\install" *.md /R:0 /W:0
          cd .\build\wrapper\csharp\
          mkdir pack
          cd pack
          cmake ../../../../pack -G "Unix Makefiles" -DTARGET_PLATFORM:STRING=all -DPACKAGE_NAME:STRING=bqlog-c#-wrapper
          cmake --build . --config Release --target package
          cd ..

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: c#_wrapper
          path: ${{ github.workspace }}/dist
