#search all source files in directories "input_dirs_list" and append them into output list "output_files_list"
function(COLLECT_SRC_FILES output_files_list input_dirs_list)
    set(_tmp_all_list ${${output_files_list}})
    foreach(DIR_ITEM ${input_dirs_list})
        file(GLOB_RECURSE _tmp_list "${DIR_ITEM}/*.h")
        list(APPEND _tmp_all_list ${_tmp_list})
        file(GLOB_RECURSE _tmp_list "${DIR_ITEM}/*.hpp")
        list(APPEND _tmp_all_list ${_tmp_list})
        file(GLOB_RECURSE _tmp_list "${DIR_ITEM}/*.c")
        list(APPEND _tmp_all_list ${_tmp_list})
        file(GLOB_RECURSE _tmp_list "${DIR_ITEM}/*.cpp")
        list(APPEND _tmp_all_list ${_tmp_list})
		if(TARGET_PLATFORM STREQUAL "mac" OR TARGET_PLATFORM STREQUAL "ios")
			file(GLOB_RECURSE _tmp_list "${DIR_ITEM}/*.m")
			list(APPEND _tmp_all_list ${_tmp_list})
			file(GLOB_RECURSE _tmp_list "${DIR_ITEM}/*.mm")
			list(APPEND _tmp_all_list ${_tmp_list})
		endif()
        file(GLOB_RECURSE _tmp_list "${DIR_ITEM}/*.txt")
        list(APPEND _tmp_all_list ${_tmp_list})
        file(GLOB_RECURSE _tmp_list "${DIR_ITEM}/*.natvis")
        list(APPEND _tmp_all_list ${_tmp_list})
    endforeach()
    set(${output_files_list} "${_tmp_all_list}" PARENT_SCOPE)
endfunction(COLLECT_SRC_FILES)

#search all directories include folder which named "include", and collect them into variable "output_dirs_list"
function(COLLECT_INCLUDE_DIRS output_dirs_list input_dirs_list)
    set(_tmp_all_list ${${output_dirs_list}})
    foreach(DIR_ITEM ${input_dirs_list})
        file(GLOB_RECURSE _tmp_list "${DIR_ITEM}/*.h" "${DIR_ITEM}/*.hpp")
        foreach(FILE_ITEM ${_tmp_list})
            string(REPLACE "\\" "/" FILE_ITEM "${FILE_ITEM}")
            string(FIND "${FILE_ITEM}" "/include/" INCLUDE_START_INDEX REVERSE)
			if(INCLUDE_START_INDEX GREATER 0)
				string(LENGTH "/include" INCLUDE_FOLDER_LENGTH)
				MATH(EXPR INCLUDE_START_INDEX "${INCLUDE_FOLDER_LENGTH} + ${INCLUDE_START_INDEX}")
				string(SUBSTRING "${FILE_ITEM}" 0 ${INCLUDE_START_INDEX} INCLUDE_DIR)
				list(FIND _tmp_all_list "${INCLUDE_DIR}" LIST_INDEX)
				if(LIST_INDEX EQUAL -1)
					message("NEW INCLUDE DIR:  ${INCLUDE_DIR}")
					list(APPEND _tmp_all_list ${INCLUDE_DIR})
				endif()
			endif()
        endforeach()
        list(FIND _tmp_all_list "${DIR_ITEM}" LIST_INDEX)
        if(LIST_INDEX EQUAL -1)
                list(APPEND _tmp_all_list ${DIR_ITEM})
        endif()
    endforeach()
    set(${output_dirs_list} "${_tmp_all_list}" PARENT_SCOPE)
endfunction(COLLECT_INCLUDE_DIRS)

#group source files in IDE
function(GROUP_FOR_IDE src_list root_folder_name)
foreach(FILE ${src_list}) 
    message("GROUP FOR: ${FILE}")
    set(ROOT_FOLDER "/${root_folder_name}/")
    string(REPLACE "\\" "/" FILE "${FILE}")
    string(FIND "${FILE}" "${ROOT_FOLDER}" ROOT_START_INDEX REVERSE)
    string(LENGTH "${ROOT_FOLDER}" ROOT_FOLDER_LENGTH)
    MATH(EXPR ROOT_START_INDEX "${ROOT_START_INDEX} + ${ROOT_FOLDER_LENGTH} - 1")
    string(SUBSTRING "${FILE}" ${ROOT_START_INDEX} -1 GROUP)
    get_filename_component(GROUP "${GROUP}" DIRECTORY)
    if(root_folder_name STREQUAL "include")
        if((APPLE_LIB_FORMAT STREQUAL "framework") OR (APPLE_LIB_FORMAT STREQUAL "bundle"))
            set_property(SOURCE ${FILE} PROPERTY
                MACOSX_PACKAGE_LOCATION Headers/${GROUP})
        endif()
    endif()
    string(REPLACE "/" "\\" GROUP "${GROUP}")
    set(GROUP "${root_folder_name}${GROUP}")
    source_group("${GROUP}" FILES "${FILE}")
endforeach()
endfunction(GROUP_FOR_IDE)


macro(bq_parse_version_from_cpp VERSION_CPP_PATH)
    #Parse version from version.cpp
    if(EXISTS "${VERSION_CPP_PATH}")
        file(READ "${VERSION_CPP_PATH}" _version_cpp)
        # defaults
        set(VERSION_MAJOR "0")
        set(VERSION_MINOR "0")
        set(VERSION_PATCH "0")
        # try to match BQ_LOG_VERSION "x.y.z"
        string(REGEX MATCH "BQ_LOG_VERSION[^\"']*\"([0-9]+)\\.([0-9]+)\\.([0-9]+)\"" _match "${_version_cpp}")
        if(NOT CMAKE_MATCH_1 STREQUAL "")
            set(VERSION_MAJOR "${CMAKE_MATCH_1}")
            set(VERSION_MINOR "${CMAKE_MATCH_2}")
            set(VERSION_PATCH "${CMAKE_MATCH_3}")
        endif()
    else()
        message(WARNING "Version file not found: `src/bq_log/global/version.cpp` â€” defaulting to 0.0.0")
    endif()
    set(BQ_LOG_VERSION "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}")
    set(BQ_LOG_SOVERSION "${VERSION_MAJOR}")
    message(STATUS "BQ_LOG_VERSION:${BQ_LOG_VERSION}")
    message(STATUS "BQ_LOG_SOVERSION:${BQ_LOG_SOVERSION}")
endmacro()