#!/usr/bin/env bash
# Usage: ./run_bqlog_tests.sh [CPP_VER]   # default: 17

set -euo pipefail
CPP_VER_PARAM=${1:-17}
mkdir -p CMakeFiles
cd CMakeFiles

ulimit -c unlimited || true
echo "Setting core dump pattern to 'core.%p'..."
sudo sysctl -w kernel.core_pattern=core.%p || echo "Failed to set core pattern (might lack permissions)."

gdb_run() {
  local exe="$1"
  set +e
  gdb --batch --quiet "$exe" \
    -ex 'set pagination off' \
    -ex 'set confirm off' \
    -ex 'set print thread-events off' \
    -ex 'set print inferior-events off' \
    \
    -ex 'catch signal SIGSEGV' \
    -ex 'commands\n silent\n printf "[GDB] Caught SIGSEGV, dumping core and backtrace...\n"\n gcore\n thread apply all bt full\n quit 1\n end' \
    \
    -ex 'catch signal SIGABRT' \
    -ex 'commands\n silent\n printf "[GDB] Caught SIGABRT, dumping core and backtrace...\n"\n gcore\n thread apply all bt full\n quit 1\n end' \
    \
    -ex 'catch signal SIGBUS' \
    -ex 'commands\n silent\n printf "[GDB] Caught SIGBUS, dumping core and backtrace...\n"\n gcore\n thread apply all bt full\n quit 1\n end' \
    \
    -ex 'catch signal SIGFPE' \
    -ex 'commands\n silent\n printf "[GDB] Caught SIGFPE, dumping core and backtrace...\n"\n gcore\n thread apply all bt full\n quit 1\n end' \
    \
    -ex 'catch signal SIGILL' \
    -ex 'commands\n silent\n printf "[GDB] Caught SIGILL, dumping core and backtrace...\n"\n gcore\n thread apply all bt full\n quit 1\n end' \
    \
    -ex 'run' \
    -ex 'if $_exitcode != 0' \
    -ex 'printf "[GDB] Program exited with code %d\n", $_exitcode' \
    -ex 'quit $_exitcode' \
    -ex 'end'
  local gdb_ec=$?
  set -e
  return $gdb_ec
}

build_and_test() {
  local build_type="$1"
  echo "==== Building ($build_type) ===="
  CC=gcc CXX=g++ cmake -DTARGET_PLATFORM:STRING=linux -DCMAKE_BUILD_TYPE="$build_type" -DCPP_VER="$CPP_VER_PARAM" ../../../../test
  make -j"$(nproc)"

  echo "==== Running BqLogUnitTest under gdb ($build_type) ===="
  if gdb_run ./BqLogUnitTest; then
    echo "[$build_type] Test succeeded."
  else
    echo "[$build_type] Test failed. If a crash occurred, a core file like core.<pid> should be present (generated by gcore)."
    echo "core_pattern: $(cat /proc/sys/kernel/core_pattern 2>/dev/null || true)"
    echo "ulimit -c: $(ulimit -c)"
    exit 1
  fi
}

# 1) Debug
build_and_test Debug

# 2) RelWithDebInfo
build_and_test RelWithDebInfo

cd ..
echo "All done."