
        /*
         * Copyright (C) 2025 Tencent.
         * BQLOG is licensed under the Apache License, Version 2.0.
         * You may obtain a copy of the License at
         *
         *     http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         */

        /*!
         * Generated Wrapper For demo_category_log (TypeScript)
         *
         * A category_log that supports attaching a category to each log entry.
         * Categories can be used to filter logs within the appender settings.
         *
         * Usage:
         *   let myLog = demo_category_log.create_log(name, cfg);
         *   myLog.info("no category %d", 1);
         *   myLog.info(myLog.cat.node_3.node_6, "with category %s", "ok");
         */

        /****************************************************************************************************************/
        /**                                 Code Generated By Categories                                              **/
        /****************************************************************************************************************/

        // ESM and TypeScript (TS will compile this to require when module=CommonJS)
        import { bq } from "bqlog";

        // Plain Node CommonJS (no "type":"module"): use this instead
        // const { bq } = require("bqlog");

        class demo_category_log_category_base extends bq.log_category_base {
            protected constructor(index: number) {
                super(index);
            }
        }

        
        class  demo_category_log_category_root
        {
            public readonly Shop = new (class demo_category_log_Shop extends demo_category_log_category_base {
                constructor() {
                    super(1);
                }
                public readonly Manager = new (class demo_category_log_Manager extends demo_category_log_category_base {
                    constructor() {
                        super(2);
                    }
                })();
                public readonly Seller = new (class demo_category_log_Seller extends demo_category_log_category_base {
                    constructor() {
                        super(3);
                    }
                })();
            })();
            public readonly Factory = new (class demo_category_log_Factory extends demo_category_log_category_base {
                constructor() {
                    super(4);
                }
                public readonly People = new (class demo_category_log_People extends demo_category_log_category_base {
                    constructor() {
                        super(5);
                    }
                    public readonly Manager = new (class demo_category_log_Manager extends demo_category_log_category_base {
                        constructor() {
                            super(6);
                        }
                    })();
                    public readonly Worker = new (class demo_category_log_Worker extends demo_category_log_category_base {
                        constructor() {
                            super(7);
                        }
                    })();
                })();
                public readonly Machine = new (class demo_category_log_Machine extends demo_category_log_category_base {
                    constructor() {
                        super(8);
                    }
                })();
                public readonly House = new (class demo_category_log_House extends demo_category_log_category_base {
                    constructor() {
                        super(9);
                    }
                })();
            })();
            public readonly Transport = new (class demo_category_log_Transport extends demo_category_log_category_base {
                constructor() {
                    super(10);
                }
                public readonly Vehicles = new (class demo_category_log_Vehicles extends demo_category_log_category_base {
                    constructor() {
                        super(11);
                    }
                    public readonly Driver = new (class demo_category_log_Driver extends demo_category_log_category_base {
                        constructor() {
                            super(12);
                        }
                    })();
                    public readonly Maintenance = new (class demo_category_log_Maintenance extends demo_category_log_category_base {
                        constructor() {
                            super(13);
                        }
                    })();
                })();
                public readonly Trains = new (class demo_category_log_Trains extends demo_category_log_category_base {
                    constructor() {
                        super(14);
                    }
                })();
            })();
        }


        export class demo_category_log extends bq.category_log {
            private static readonly category_names: string[] = [
                                                                   ""
                                                                   , "Shop"
                                                                   , "Shop.Manager"
                                                                   , "Shop.Seller"
                                                                   , "Factory"
                                                                   , "Factory.People"
                                                                   , "Factory.People.Manager"
                                                                   , "Factory.People.Worker"
                                                                   , "Factory.Machine"
                                                                   , "Factory.House"
                                                                   , "Transport"
                                                                   , "Transport.Vehicles"
                                                                   , "Transport.Vehicles.Driver"
                                                                   , "Transport.Vehicles.Maintenance"
                                                                   , "Transport.Trains"
                                                               ];
            private static readonly categories_count: number = demo_category_log.category_names.length;

            public readonly cat = new demo_category_log_category_root();

            protected constructor(arg: demo_category_log | bigint) {
                super(arg as any);
            }

            public declare get_categories_count: () => number;
            public declare get_categories_name_array: () => string[];

            /**
             * Create a log object
             * @param name 
             *             If the log name is an empty string, bqLog will automatically assign you a unique name. 
             *             If the log name already exists, it will return the previously existing log object and overwrite the previous configuration with the new config.
             * @param config
             *             log config string
             * @return
             *             A log object, if create failed, the is_valid() method of it will return false
             */
            public static create_log(name: string, config: string): demo_category_log {

                let default_log = bq.category_log.call_api_create_category_log(name, config, demo_category_log.categories_count, demo_category_log.category_names);
                let result = new demo_category_log(default_log as any);
                //check categories
                if (result.get_categories_count() != demo_category_log.categories_count) {
                    console.log("expected:" + demo_category_log.categories_count + ", but:" + result.get_categories_count());

                    return new demo_category_log(0n);
                }
                for (let i = 0; i < result.get_categories_count(); ++i) {
                    if (demo_category_log.category_names[i] != demo_category_log.category_names[i]) {
                        return new demo_category_log(0n);
                    }
                }
                return result;
            }

            /**
             * Get a log object by it's name
             * @param log_name
             * 			Name of the log you want to find
             * @return
             * 			A log object, if the log object with specific name was not found, the is_valid() method of it will return false
             */
            public static get_log_by_name(log_name: string): demo_category_log {

                let default_log = bq.log.get_log_by_name(log_name);
                return new demo_category_log(default_log as any);
            }

            // ======== Overloads: each function supports both modes you requested ========
            public declare verbose: (typeof bq.log.prototype.verbose) & ((cat: demo_category_log_category_base, log_format_content: string, ...args: unknown[]) => boolean);
            public declare debug: (typeof bq.log.prototype.debug) & ((cat: demo_category_log_category_base, log_format_content: string, ...args: unknown[]) => boolean);
            public declare info: (typeof bq.log.prototype.info) & ((cat: demo_category_log_category_base, log_format_content: string, ...args: unknown[]) => boolean);
            public declare warning: (typeof bq.log.prototype.warning) & ((cat: demo_category_log_category_base, log_format_content: string, ...args: unknown[]) => boolean);
            public declare error: (typeof bq.log.prototype.error) & ((cat: demo_category_log_category_base, log_format_content: string, ...args: unknown[]) => boolean);
            public declare fatal: (typeof bq.log.prototype.fatal) & ((cat: demo_category_log_category_base, log_format_content: string, ...args: unknown[]) => boolean);
        }
        