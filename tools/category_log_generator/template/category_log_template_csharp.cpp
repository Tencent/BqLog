/*
 * Copyright (C) 2025 Tencent.
 * BQLOG is licensed under the Apache License, Version 2.0.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
#include "template/category_log_template_csharp.h"

namespace bq {

    bq::string category_log_template_csharp::format(const bq::string& template_string, const category_node& root_node) const
    {
        bq::string generated_code = template_string;
        generated_code = replace_with_tab_format(generated_code, "${CLASS_NAME}", class_name_);
        generated_code = replace_with_tab_format(generated_code, "${CATEGORY_NAMES}", get_category_names_code(root_node));
        generated_code = replace_with_tab_format(generated_code, "${CATEGORY_ROOT_CLASS}", get_category_class_root_define_code(root_node));

        return generated_code;
    }

    bq::string category_log_template_csharp::get_category_names_code_recursive(const category_node& node) const
    {
        bq::string tab = "    ";
        bq::string code = tab;
        if (node.parent()) // empty means it is root node, first value
        {
            code += ", ";
        }
        code += "\"" + node.full_name() + "\"\n";
        for (const auto& child : node.get_all_children()) {
            code += get_category_names_code_recursive(*child);
        }
        return code;
    }
    bq::string category_log_template_csharp::get_category_class_code_recursive(const category_node& node, const bq::string& tab, uint64_t& index) const
    {
        bq::string node_class_name = class_name_ + "_" + node.name();
        bq::string code = tab + "public class " + node_class_name + " : " + class_name_ + "_category_base\n";
        code += tab + "{\n";
        ++index;
        code += tab + "    public " + node_class_name + "(){index = " + uint64_to_string(index) + ";}\n";

        for (const auto& child : node.get_all_children()) {
            code += get_category_class_code_recursive(*child, tab + "    ", index);
        }
        code += tab + "}\n";
        code += tab + "public " + node_class_name + " " + node.name() + " = new " + node_class_name + "();     //" + node.full_name();
        if (!node.comment().trim().is_empty()) {
            code += "    //" + node.comment();
        }
        code += "\n";
        return code;
    }

    bq::string category_log_template_csharp::get_category_names_code(const category_node& root_node) const
    {
        bq::string code = "{\n";
        code += get_category_names_code_recursive(root_node);
        code += "}";
        return code;
    }
    bq::string category_log_template_csharp::get_category_class_root_define_code(const category_node& root_node) const
    {
        bq::string code = "public class " + class_name_ + "_category_root\n";
        code += "{\n";
        uint64_t index = 0;
        for (const auto& child : root_node.get_all_children()) {
            code += get_category_class_code_recursive(*child, "    ", index);
        }
        code += "}\n";
        return code;
    }

    bq::string category_log_template_csharp::get_template_content() const
    {
        bq::string template_1 = R"(/*
 * Copyright (C) 2025 Tencent.
 * BQLOG is licensed under the Apache License, Version 2.0.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
using bq;
using bq.def;
using bq.impl;
using System.Runtime.InteropServices;

/*!
 * Generated Wrapper For ${CLASS_NAME}
 *
 * This is a category_log that supports attaching a category to each log entry.
 * Categories can be used to filter logs within the appender settings.
 *
 *    Usage: 
 *    bq.${CLASS_NAME} my_category_log = bq.${CLASS_NAME}::create_log(log_name, log_config);  //create a ${CLASS_NAME} object with config.
 *    my_category_log.info("content");  //this is for empty category
 *  my_category_log.info(my_category_log.cat.moduleA.classB, "content"); //this is a log entry for category ModuleA.ClassB, which was generated by your Category Config File
 */

public class ${CLASS_NAME} : category_log{
    private ${CLASS_NAME}() : base()
    {
    }
    
    private ${CLASS_NAME}(log child_inst) : base(child_inst)
    {
    }

    /// <summary>
    /// Create a ${CLASS_NAME} object
    /// </summary>
    /// <param name="name">
    ///     If the ${CLASS_NAME} name is an empty string, bqLog will automatically assign you a unique name. 
    ///     If the ${CLASS_NAME} name already exists, it will return the previously existing ${CLASS_NAME} object and overwrite the previous configuration with the new config.
    /// </param>
    /// <param name="config">
    ///     ${CLASS_NAME} config string
    /// </param>
    /// <returns>
    ///     A ${CLASS_NAME} object, if create failed, the is_valid() method of it will return false
    /// </returns>
    public static new ${CLASS_NAME} create_log(string name, string config)
    {
        if (string.IsNullOrEmpty(config))
        {
            return new ${CLASS_NAME}();
        }
        ulong log_id = 0;
        unsafe
        {
            //char*[] is not supported in some IL2CPP old versions, so we have to use such an ugly way to do this.
            //char*[] category_names_array = new char*[categories_count];
            System.IntPtr names_array_alloc_ptr = Marshal.AllocHGlobal((int)(sizeof(byte*) * categories_count));
            byte** category_names_array_byte_ptr = (byte**)names_array_alloc_ptr.ToPointer();
            for (int i = 0; i < categories_count; ++i)
            {
                category_names_array_byte_ptr[i] = utf8_encoder.alloc_utf8_fixed_str(category_names[i]);
            }

            byte* utf8_name_bytes = utf8_encoder.alloc_utf8_fixed_str(name);
            byte* utf8_config_bytes = utf8_encoder.alloc_utf8_fixed_str(config);

            log_id = log_invoker.__api_create_log(utf8_name_bytes, utf8_config_bytes, categories_count, category_names_array_byte_ptr);

            for (int i = 0; i < categories_count; ++i)
            {
                utf8_encoder.release_utf8_fixed_str(category_names_array_byte_ptr[i]);
            }
            utf8_encoder.release_utf8_fixed_str(utf8_name_bytes);
            utf8_encoder.release_utf8_fixed_str(utf8_config_bytes);
            Marshal.FreeHGlobal(names_array_alloc_ptr);
        }
        log result = get_log_by_id(log_id);
        return new ${CLASS_NAME}(result);
    }


    /// <summary>
    /// Get a ${CLASS_NAME} object by it's name
    /// </summary>
    /// <param name="log_name">Name of the ${CLASS_NAME} object you want to find</param>
    /// <returns>A ${CLASS_NAME} object, if the ${CLASS_NAME} object with specific name was not found, the is_valid() method of it will return false</returns>
    public static new ${CLASS_NAME} get_log_by_name(string log_name)
    {
        ${CLASS_NAME} result = new ${CLASS_NAME}(log.get_log_by_name(log_name));
        if(!result.is_valid())
        {
            return result;
        }
        //check categories
        if (result.get_categories_count() != ${CLASS_NAME}.categories_count)
        {
            return new ${CLASS_NAME}();
        }
        for (uint i = 0; i < result.get_categories_count(); ++i)
        {
            if (!${CLASS_NAME}.category_names[(int)i].Equals(result.get_categories_name_array()[(int)i]))
            {
                return new ${CLASS_NAME}();
            }
        }
        return result;
    })";
        bq::string template_2 = R"(


    ///Core log functions with category param, there are 6 log levels:
    ///verbose, debug, info, warning, error, fatal
    #region log methods for param count 0
    public unsafe bool verbose(${CLASS_NAME}_category_base category, string log_format_content)
    {
        return do_log(category, log_level.verbose, log_format_content);
    }
    public unsafe bool debug(${CLASS_NAME}_category_base category, string log_format_content)
    {
        return do_log(category, log_level.debug, log_format_content);
    }
    public unsafe bool info(${CLASS_NAME}_category_base category, string log_format_content)
    {
        return do_log(category, log_level.info, log_format_content);
    }
    public unsafe bool warning(${CLASS_NAME}_category_base category, string log_format_content)
    {
        return do_log(category, log_level.warning, log_format_content);
    }
    public unsafe bool error(${CLASS_NAME}_category_base category, string log_format_content)
    {
        return do_log(category, log_level.error, log_format_content);
    }
    public unsafe bool fatal(${CLASS_NAME}_category_base category, string log_format_content)
    {
        return do_log(category, log_level.fatal, log_format_content);
    }
    #endregion

    #region log methods for param count 1
    public unsafe bool verbose(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1);
    }
    public unsafe bool debug(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1);
    }
    public unsafe bool info(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1)
    {
        return do_log(category, log_level.info, log_format_content, ref p1);
    }
    public unsafe bool warning(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1);
    }
    public unsafe bool error(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1)
    {
        return do_log(category, log_level.error, log_format_content, ref p1);
    }
    public unsafe bool fatal(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1);
    }
    #endregion

    #region log methods for param count 2
    public unsafe bool verbose(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2);
    }
    public unsafe bool debug(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2);
    }
    public unsafe bool info(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2);
    }
    public unsafe bool warning(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2);
    }
    public unsafe bool error(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2);
    }
    public unsafe bool fatal(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2);
    }
    #endregion

    #region log methods for param count 3
    public unsafe bool verbose(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2, ref p3);
    }
    public unsafe bool debug(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2, ref p3);
    }
    public unsafe bool info(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2, ref p3);
    }
    public unsafe bool warning(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2, ref p3);
    }
    public unsafe bool error(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2, ref p3);
    }
    public unsafe bool fatal(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2, ref p3);
    }
    #endregion

    #region log methods for param count 4
    public unsafe bool verbose(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2, ref p3, ref p4);
    }
    public unsafe bool debug(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2, ref p3, ref p4);
    }
    public unsafe bool info(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2, ref p3, ref p4);
    }
    public unsafe bool warning(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2, ref p3, ref p4);
    }
    public unsafe bool error(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2, ref p3, ref p4);
    }
    public unsafe bool fatal(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2, ref p3, ref p4);
    }
    #endregion

    #region log methods for param count 5
    public unsafe bool verbose(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5);
    }
    public unsafe bool debug(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5);
    }
    public unsafe bool info(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5);
    }
    public unsafe bool warning(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5);
    }
    public unsafe bool error(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5);
    }
    public unsafe bool fatal(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5);
    }
    #endregion
)";

        bq::string template_3 = R"(
    #region log methods for param count 6
    public unsafe bool verbose(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6);
    }
    public unsafe bool debug(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6);
    }
    public unsafe bool info(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6);
    }
    public unsafe bool warning(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6);
    }
    public unsafe bool error(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6);
    }
    public unsafe bool fatal(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6);
    }
    #endregion

    #region log methods for param count 7
    public unsafe bool verbose(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7);
    }
    public unsafe bool debug(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7);
    }
    public unsafe bool info(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7);
    }
    public unsafe bool warning(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7);
    }
    public unsafe bool error(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7);
    }
    public unsafe bool fatal(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7);
    }
    #endregion

    #region log methods for param count 8
    public unsafe bool verbose(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8);
    }
    public unsafe bool debug(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8);
    }
    public unsafe bool info(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8);
    }
    public unsafe bool warning(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8);
    }
    public unsafe bool error(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8);
    }
    public unsafe bool fatal(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8);
    }
    #endregion

    #region log methods for param count 9
    public unsafe bool verbose(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9);
    }
    public unsafe bool debug(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9);
    }
    public unsafe bool info(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9);
    }
    public unsafe bool warning(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9);
    }
    public unsafe bool error(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9);
    }
    public unsafe bool fatal(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9);
    }
    #endregion

    #region log methods for param count 10
    public unsafe bool verbose(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10);
    }
    public unsafe bool debug(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10);
    }
    public unsafe bool info(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10);
    }
    public unsafe bool warning(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10);
    }
    public unsafe bool error(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10);
    }
    public unsafe bool fatal(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10);
    }
    #endregion
)";

        bq::string template_4 = R"(
    #region log methods for param count 11
    public unsafe bool verbose(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11);
    }
    public unsafe bool debug(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11);
    }
    public unsafe bool info(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11);
    }
    public unsafe bool warning(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11);
    }
    public unsafe bool error(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11);
    }
    public unsafe bool fatal(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11);
    }
    #endregion

    #region log methods for param count 12
    public unsafe bool verbose(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11, param_wrapper p12)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11, ref p12);
    }
    public unsafe bool debug(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11, param_wrapper p12)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11, ref p12);
    }
    public unsafe bool info(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11, param_wrapper p12)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11, ref p12);
    }
    public unsafe bool warning(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11, param_wrapper p12)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11, ref p12);
    }
    public unsafe bool error(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11, param_wrapper p12)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11, ref p12);
    }
    public unsafe bool fatal(${CLASS_NAME}_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11, param_wrapper p12)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11, ref p12);
    }
    #endregion

    #region log methods for more params. but call this method will cause GC(Heap) alloc
    public unsafe bool verbose(${CLASS_NAME}_category_base category, string log_format_content, params param_wrapper[] args)
    {
        return do_log(category, log_level.verbose, log_format_content, args);
    }
    public unsafe bool debug(${CLASS_NAME}_category_base category, string log_format_content, params param_wrapper[] args)
    {
        return do_log(category, log_level.debug, log_format_content, args);
    }
    public unsafe bool info(${CLASS_NAME}_category_base category, string log_format_content, params param_wrapper[] args)
    {
        return do_log(category, log_level.info, log_format_content, args);
    }
    public unsafe bool warning(${CLASS_NAME}_category_base category, string log_format_content, params param_wrapper[] args)
    {
        return do_log(category, log_level.warning, log_format_content, args);
    }
    public unsafe bool error(${CLASS_NAME}_category_base category, string log_format_content, params param_wrapper[] args)
    {
        return do_log(category, log_level.error, log_format_content, args);
    }
    public unsafe bool fatal(${CLASS_NAME}_category_base category, string log_format_content, params param_wrapper[] args)
    {
        return do_log(category, log_level.fatal, log_format_content, args);
    }
    #endregion




    /****************************************************************************************************************/
    /**                                 Code Generated By Categories                                              ***/
    /****************************************************************************************************************/
    private static readonly string[] category_names = ${CATEGORY_NAMES};
    private static readonly uint categories_count = (uint)category_names.Length;
    public class ${CLASS_NAME}_category_base : log_category_base
    {
    }
    ${CATEGORY_ROOT_CLASS}

    
    public readonly ${CLASS_NAME}_category_root cat = new ${CLASS_NAME}_category_root();
})";
        return template_1 + template_2 + template_3 + template_4;
    }
}
